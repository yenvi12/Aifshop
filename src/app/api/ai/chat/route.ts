import { NextRequest, NextResponse } from 'next/server';
import { isTokenExpired } from '@/lib/tokenManager';

// OpenRouter API configuration
const OPENROUTER_API_URL = 'https://openrouter.ai/api/v1/chat/completions';
const MODEL_NAME = 'z-ai/glm-4.5-air:free';

// System prompt cho AI chuy√™n t∆∞ v·∫•n trang s·ª©c
const SYSTEM_PROMPT = `B·∫°n l√† chuy√™n gia t∆∞ v·∫•n trang s·ª©c cao c·∫•p cho AIFShop - c·ª≠a h√†ng trang s·ª©c v√† th·ªùi trang uy t√≠n t·∫°i Vi·ªát Nam. V·ªõi kinh nghi·ªám s√¢u r·ªông v·ªÅ c√°c lo·∫°i trang s·ª©c, xu h∆∞·ªõng th·ªùi trang v√† ki·∫øn th·ª©c gemstone, b·∫°n s·∫Ω gi√∫p kh√°ch h√†ng:

üîπ **S·∫£n ph·∫©m & T∆∞ v·∫•n:**
- Nh·∫´n kim c∆∞∆°ng, nh·∫´n v√†ng, nh·∫´n b·∫°c
- D√¢y chuy·ªÅn, v√≤ng c·ªï, b√¥ng tai
- V√≤ng tay, l·∫Øc tay phong th·ªßy
- Trang s·ª©c c∆∞·ªõi, qu√† t·∫∑ng

üîπ **Chuy√™n m√¥n c·ªßa b·∫°n:**
- T∆∞ v·∫•n size nh·∫´n ph√π h·ª£p (size VN, qu·ªëc t·∫ø)
- G·ª£i √Ω trang s·ª©c theo d√°ng ng∆∞·ªùi, da m√†u
- Ki·∫øn th·ª©c v·ªÅ kim lo·∫°i (v√†ng 18K, 14K, b·∫°c 925)
- Th√¥ng tin ƒë√° qu√Ω v√† phong th·ªßy
- Xu h∆∞·ªõng trang s·ª©c theo m√πa, theo d·ªãp

üîπ **D·ªãch v·ª• kh√°ch h√†ng:**
- Gi√∫p t√¨m s·∫£n ph·∫©m ph√π h·ª£p ng√¢n s√°ch
- T∆∞ v·∫•n trang s·ª©c cho c√°c d·ªãp ƒë·∫∑c bi·ªát
- H∆∞·ªõng d·∫´n b·∫£o qu·∫£n trang s·ª©c
- Th√¥ng tin v·ªÅ ch√≠nh s√°ch b·∫£o h√†nh, ƒë·ªïi tr·∫£

üîπ **Phong c√°ch giao ti·∫øp:**
- Th√¢n thi·ªán, chuy√™n nghi·ªáp, tinh t·∫ø
- Lu√¥n ƒë·∫∑t l·ª£i √≠ch kh√°ch h√†ng l√™n h√†ng ƒë·∫ßu
- Cung c·∫•p th√¥ng tin ch√≠nh x√°c, h·ªØu √≠ch
- G·ª£i √Ω s·∫£n ph·∫©m th·ª±c t·∫ø c√≥ s·∫µn t·∫°i AIFShop

H√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu v√† lu√¥n h∆∞·ªõng ƒë·∫øn gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ c·ªßa kh√°ch h√†ng. Khi c·∫ßn, h√£y h·ªèi th√™m th√¥ng tin ƒë·ªÉ t∆∞ v·∫•n ch√≠nh x√°c nh·∫•t.`;

export async function POST(request: NextRequest) {
  try {
    // Verify authentication token
    const authHeader = request.headers.get('authorization');
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return NextResponse.json(
        { error: 'Unauthorized - Please login to use AI chat' },
        { status: 401 }
      );
    }

    const token = authHeader.substring(7);
    
    // Check if token is expired
    if (isTokenExpired(token)) {
      return NextResponse.json(
        { error: 'Session expired - Please login again' },
        { status: 401 }
      );
    }

    // Get request body
    const body = await request.json();
    const { message, conversationHistory = [] } = body;

    if (!message || typeof message !== 'string') {
      return NextResponse.json(
        { error: 'Message is required and must be a string' },
        { status: 400 }
      );
    }

    // Get OpenRouter API key from environment
    const apiKey = process.env.OPENROUTER_API_KEY;
    if (!apiKey) {
      console.error('OpenRouter API key not configured');
      return NextResponse.json(
        { error: 'AI service temporarily unavailable' },
        { status: 503 }
      );
    }

    // Prepare messages for OpenRouter
    const messages = [
      { role: 'system', content: SYSTEM_PROMPT },
      ...conversationHistory.slice(-10), // Keep last 10 messages for context
      { role: 'user', content: message }
    ];

    // Make request to OpenRouter
    const response = await fetch(OPENROUTER_API_URL, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Content-Type': 'application/json',
        'HTTP-Referer': process.env.NEXTAUTH_URL || 'http://localhost:3000',
        'X-Title': 'AIFShop AI Assistant'
      },
      body: JSON.stringify({
        model: MODEL_NAME,
        messages: messages,
        max_tokens: 1000,
        temperature: 0.7,
        top_p: 0.9,
        frequency_penalty: 0.1,
        presence_penalty: 0.1
      })
    });

    if (!response.ok) {
      const errorData = await response.text();
      console.error('OpenRouter API error:', errorData);
      
      if (response.status === 401) {
        return NextResponse.json(
          { error: 'AI service authentication failed' },
          { status: 503 }
        );
      }
      
      if (response.status === 429) {
        return NextResponse.json(
          { error: 'AI service temporarily busy - Please try again' },
          { status: 429 }
        );
      }

      return NextResponse.json(
        { error: 'AI service temporarily unavailable' },
        { status: 503 }
      );
    }

    const data = await response.json();
    
    if (!data.choices || !data.choices[0] || !data.choices[0].message) {
      console.error('Invalid response from OpenRouter:', data);
      return NextResponse.json(
        { error: 'Invalid response from AI service' },
        { status: 503 }
      );
    }

    const aiResponse = data.choices[0].message.content;
    
    // Check if AI response is empty or null
    if (!aiResponse || aiResponse.trim() === '') {
      console.error('AI response is empty:', aiResponse);
      return NextResponse.json(
        { error: 'AI service returned empty response' },
        { status: 503 }
      );
    }

    // Return successful response
    return NextResponse.json({
      success: true,
      response: aiResponse,
      usage: data.usage || null,
      model: MODEL_NAME
    });

  } catch (error) {
    console.error('AI Chat API Error:', error);
    
    return NextResponse.json(
      { 
        error: 'Internal server error',
        message: 'Unable to process your request at this time'
      },
      { status: 500 }
    );
  }
}

// Handle OPTIONS request for CORS
export async function OPTIONS() {
  return new NextResponse(null, {
    status: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'POST, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    },
  });
}
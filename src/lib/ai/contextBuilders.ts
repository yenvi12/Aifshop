import { prisma } from '@/lib/prisma'

export interface ProductContext {
  id: string
  name: string
  price: number | null
  compareAtPrice: number | null
  description: string | null
  category: string
  images: string[]
  sizes: any[]
  rating: number | null
  stock: number
  badge: string | null
  reviews: any[]
  relatedProducts: any[]
}

export interface OrderContext {
  id: string
  orderNumber: string
  status: string
  totalAmount: number
  trackingNumber: string | null
  estimatedDelivery: Date | null
  orderItems: any[]
  shippingAddress: any
  createdAt: Date
}

export class ProductContextBuilder {
  static async buildContext(productId: string): Promise<string> {
    try {
      const product = await prisma.product.findUnique({
        where: { id: productId, isActive: true },
        select: {
          id: true,
          name: true,
          price: true,
          compareAtPrice: true,
          description: true,
          category: true,
          image: true,
          images: true,
          sizes: true,
          rating: true,
          stock: true,
          badge: true,
          reviews: {
            where: { isActive: true },
            take: 5,
            orderBy: { createdAt: 'desc' },
            include: {
              user: {
                select: {
                  firstName: true,
                  lastName: true
                }
              }
            }
          },
          _count: {
            select: { reviews: true }
          }
        }
      })

      if (!product) {
        return 'S·∫£n ph·∫©m kh√¥ng t√¨m th·∫•y ho·∫∑c ƒë√£ ng∆∞ng kinh doanh.'
      }

      console.log('Product data retrieved:', {
        id: product.id,
        name: product.name,
        hasDescription: !!product.description,
        descriptionLength: product.description?.length || 0,
        hasSizes: !!product.sizes,
        sizesCount: Array.isArray(product.sizes) ? product.sizes.length : 0,
        sizes: product.sizes
      });

      const relatedProducts = await this.getRelatedProducts(product.category, product.id)
      
      return this.formatProductContext(product, relatedProducts)
    } catch (error) {
      console.error('Error building product context:', error)
      return 'Kh√¥ng th·ªÉ t·∫£i th√¥ng tin s·∫£n ph·∫©m l√∫c n√†y.'
    }
  }

  private static async getRelatedProducts(category: string, currentProductId: string): Promise<any[]> {
    try {
      const relatedProducts = await prisma.product.findMany({
        where: {
          category,
          isActive: true,
          id: { not: currentProductId }
        },
        take: 3,
        select: {
          id: true,
          name: true,
          price: true,
          compareAtPrice: true,
          image: true,
          rating: true,
          badge: true,
          slug: true
        },
        orderBy: { rating: 'desc' }
      })

      return relatedProducts
    } catch (error) {
      console.error('Error fetching related products:', error)
      return []
    }
  }

  private static formatProductContext(product: any, relatedProducts: any[]): string {
    const discount = product.compareAtPrice && product.price 
      ? Math.round(((product.compareAtPrice - product.price) / product.compareAtPrice) * 100)
      : 0

    let context = `
üì¶ **TH√îNG TIN S·∫¢N PH·∫®M HI·ªÜN T·∫†I:**
- T√™n: ${product.name}
- Gi√°: ${product.price ? `${product.price.toLocaleString('vi-VN')}‚Ç´` : 'Li√™n h·ªá'}
${product.compareAtPrice ? `- Gi√° g·ªëc: ${product.compareAtPrice.toLocaleString('vi-VN')}‚Ç´` : ''}
${discount > 0 ? `- Gi·∫£m gi√°: ${discount}%` : ''}
- Danh m·ª•c: ${product.category}
- T·ªìn kho: ${product.stock} s·∫£n ph·∫©m
${product.badge ? `- Tags: ${product.badge}` : ''}

üìù **M√î T·∫¢ S·∫¢N PH·∫®M:**
${product.description || 'Kh√¥ng c√≥ m√¥ t·∫£ chi ti·∫øt.'}

üìè **TH√îNG TIN SIZE:**
${this.formatSizes(product.sizes)}

‚≠ê **ƒê√ÅNH GI√Å:**
- Rating: ${product.rating?.toFixed(1) || 'Ch∆∞a c√≥ ƒë√°nh gi√°'}/5
- S·ªë l∆∞·ª£ng ƒë√°nh gi√°: ${product._count?.reviews || 0}

üì∑ **H√åNH ·∫¢NH:**
S·∫£n ph·∫©m c√≥ ${product.images?.length || 0} h√¨nh ·∫£nh chi ti·∫øt.
`

    if (product.reviews && product.reviews.length > 0) {
      context += `
üí¨ **ƒê√ÅNH GI√Å G·∫¶N ƒê√ÇY:**
${this.formatRecentReviews(product.reviews)}
`
    }

    if (relatedProducts.length > 0) {
      context += `
üîó **S·∫¢N PH·∫®M LI√äN QUAN:**
${this.formatRelatedProducts(relatedProducts)}
`
    }

    return context
  }

  private static formatSizes(sizes: any[]): string {
    if (!sizes || sizes.length === 0) {
      return '- Kh√¥ng c√≥ th√¥ng tin size c·ª• th·ªÉ'
    }

    return sizes.map((size: any) => {
      const status = size.stock > 0 
        ? `C√≤n ${size.stock} s·∫£n ph·∫©m` 
        : 'H·∫øt h√†ng'
      return `- Size ${size.name}: ${status}`
    }).join('\n')
  }

  private static formatRecentReviews(reviews: any[]): string {
    return reviews.slice(0, 3).map((review: any) => {
      const userName = `${review.user.firstName} ${review.user.lastName}`
      const rating = '‚≠ê'.repeat(review.rating)
      return `- ${userName} (${rating}): "${review.comment}"`
    }).join('\n')
  }

  private static formatRelatedProducts(relatedProducts: any[]): string {
    return relatedProducts.map((product: any, index: number) => {
      const price = product.price ? `${product.price.toLocaleString('vi-VN')}‚Ç´` : 'Li√™n h·ªá'
      const rating = product.rating ? `${product.rating.toFixed(1)}/5` : 'Ch∆∞a c√≥ ƒë√°nh gi√°'
      return `${index + 1}. ${product.name} - ${price} (Rating: ${rating})`
    }).join('\n')
  }
}

export class OrderContextBuilder {
  static async buildOrderContext(userId: string): Promise<string> {
    try {
      const orders = await prisma.order.findMany({
        where: { userId },
        orderBy: { createdAt: 'desc' },
        take: 5,
        include: {
          orderItems: {
            include: {
              product: {
                select: {
                  name: true,
                  image: true,
                  slug: true
                }
              }
            }
          },
          payment: true
        }
      })

      if (orders.length === 0) {
        return 'B·∫°n ch∆∞a c√≥ ƒë∆°n h√†ng n√†o.'
      }

      return this.formatOrderContext(orders)
    } catch (error) {
      console.error('Error building order context:', error)
      return 'Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ƒë∆°n h√†ng l√∫c n√†y.'
    }
  }

  private static formatOrderContext(orders: any[]): string {
    let context = `
üìã **TH√îNG TIN ƒê∆†N H√ÄNG C·ª¶A B·∫†N:**

`

    orders.forEach((order: any, index: number) => {
      const statusEmoji = this.getStatusEmoji(order.status)
      const statusText = this.getStatusText(order.status)
      
      context += `
${index + 1}. **ƒê∆°n h√†ng #${order.orderNumber}**
   - Tr·∫°ng th√°i: ${statusEmoji} ${statusText}
   - T·ªïng ti·ªÅn: ${order.totalAmount.toLocaleString('vi-VN')}‚Ç´
   - Ng√†y ƒë·∫∑t: ${order.createdAt.toLocaleDateString('vi-VN')}
   ${order.trackingNumber ? `- M√£ v·∫≠n chuy·ªÉn: ${order.trackingNumber}` : ''}
   ${order.estimatedDelivery ? `- D·ª± ki·∫øn giao: ${order.estimatedDelivery.toLocaleDateString('vi-VN')}` : ''}
   
   **S·∫£n ph·∫©m trong ƒë∆°n:**
   ${order.orderItems.map((item: any) => 
     `‚Ä¢ ${item.product.name} ${item.size ? `(Size ${item.size})` : ''} - SL: ${item.quantity}`
   ).join('\n   ')}
`
    })

    return context
  }

  private static getStatusEmoji(status: string): string {
    const statusMap: Record<string, string> = {
      'ORDERED': 'üìù',
      'CONFIRMED': '‚úÖ',
      'PROCESSING': '‚öôÔ∏è',
      'SHIPPED': 'üöö',
      'DELIVERED': '‚ú®',
      'CANCELLED': '‚ùå'
    }
    return statusMap[status] || 'üìù'
  }

  private static getStatusText(status: string): string {
    const statusMap: Record<string, string> = {
      'ORDERED': 'ƒê√£ ƒë·∫∑t h√†ng',
      'CONFIRMED': 'ƒê√£ x√°c nh·∫≠n',
      'PROCESSING': 'ƒêang x·ª≠ l√Ω',
      'SHIPPED': 'ƒêang giao h√†ng',
      'DELIVERED': 'ƒê√£ giao h√†ng',
      'CANCELLED': 'ƒê√£ h·ªßy'
    }
    return statusMap[status] || status
  }
}

export class GeneralContextBuilder {
  static buildGeneralContext(): string {
    return `
üè™ **TH√îNG TIN C·ª¨A H√ÄNG AIFShop:**
- Chuy√™n kinh doanh trang s·ª©c cao c·∫•p: nh·∫´n, d√¢y chuy·ªÅn, b√¥ng tai, v√≤ng tay
- Ch·∫•t li·ªáu: v√†ng 18K, 14K, b·∫°c 925, kim c∆∞∆°ng, ƒë√° qu√Ω
- D·ªãch v·ª•: t∆∞ v·∫•n size, b·∫£o h√†nh, ƒë·ªïi tr·∫£, mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn
- Hotline h·ªó tr·ª£: 1900-xxxx
- Gi·ªù m·ªü c·ª≠a: 8:00 - 22:00 m·ªói ng√†y

üí° **G·ª¢I √ù T∆Ø V·∫§N:**
- T∆∞ v·∫•n size nh·∫´n d·ª±a tr√™n s·ªë ƒëo v√≤ng ng√≥n
- G·ª£i √Ω trang s·ª©c ph√π h·ª£p v·ªõi d√°ng ng∆∞·ªùi v√† phong c√°ch
- T∆∞ v·∫•n trang s·ª©c theo d·ªãp ƒë·∫∑c bi·ªát (c∆∞·ªõi, l·ªÖ, sinh nh·∫≠t)
- H∆∞·ªõng d·∫´n b·∫£o qu·∫£n trang s·ª©c ƒë√∫ng c√°ch
- Th√¥ng tin v·ªÅ ch√≠nh s√°ch b·∫£o h√†nh v√† ƒë·ªïi tr·∫£
`
  }
}